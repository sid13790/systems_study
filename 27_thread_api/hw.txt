1.

The data race is between the main thread and the worker thread. They both try to
update the value of balance without any kind of locking.

Helgrind reports the data race at line 8 (the balance update in the worker 
thread), and line 15 (the balance update in the main thread).

2.

Removing the balance update from the main thread removes all issues. Removing 
the balance update from the worker thread removes all issues as well.

Adding a lock around one of the cases doesn't solve anything, and it reports the
same issue as from question 1.

Adding a lock around both of the updates removes all issues.

3.

The first thread could lock m1, and the second thread could lock m2, but then
the first thread would be waiting for m2, while the second thread would be
waiting for m1, thus creating a deadlock.

4.

swarajd@swarajd-travel:~/prog/systems/3ep/27_thread_api$ valgrind --tool=helgrind ./main-deadlock
==26389== Helgrind, a thread error detector
==26389== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==26389== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==26389== Command: ./main-deadlock
==26389== 
==26389== ---Thread-Announcement------------------------------------------
==26389== 
==26389== Thread #3 was created
==26389==    at 0x518287E: clone (clone.S:71)
==26389==    by 0x4E49EC4: create_thread (createthread.c:100)
==26389==    by 0x4E49EC4: pthread_create@@GLIBC_2.2.5 (pthread_create.c:797)
==26389==    by 0x4C36A27: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108C54: Pthread_create (mythreads.h:51)
==26389==    by 0x108D89: main (main-deadlock.c:24)
==26389== 
==26389== ----------------------------------------------------------------
==26389== 
==26389== Thread #3: lock order "0x30A040 before 0x30A080" violated
==26389== 
==26389== Observed (incorrect) order is: acquisition of lock at 0x30A080
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108D06: worker (main-deadlock.c:13)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389== 
==26389==  followed by a later acquisition of lock at 0x30A040
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108D12: worker (main-deadlock.c:14)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389== 
==26389== Required order was established by acquisition of lock at 0x30A040
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108CEC: worker (main-deadlock.c:10)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389== 
==26389==  followed by a later acquisition of lock at 0x30A080
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108CF8: worker (main-deadlock.c:11)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389== 
==26389==  Lock at 0x30A040 was first observed
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108CEC: worker (main-deadlock.c:10)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389==  Address 0x30a040 is 0 bytes inside data symbol "m1"
==26389== 
==26389==  Lock at 0x30A080 was first observed
==26389==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26389==    by 0x108CF8: worker (main-deadlock.c:11)
==26389==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26389==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26389==    by 0x518288E: clone (clone.S:95)
==26389==  Address 0x30a080 is 0 bytes inside data symbol "m2"
==26389== 
==26389== 
==26389== 
==26389== For counts of detected and suppressed errors, rerun with: -v
==26389== Use --history-level=approx or =none to gain increased speed, at
==26389== the cost of reduced accuracy of conflicting-access information
==26389== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 7 from 7)

5.

==26872== Helgrind, a thread error detector
==26872== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==26872== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==26872== Command: ./main-deadlock-global
==26872== 
==26872== ---Thread-Announcement------------------------------------------
==26872== 
==26872== Thread #3 was created
==26872==    at 0x518287E: clone (clone.S:71)
==26872==    by 0x4E49EC4: create_thread (createthread.c:100)
==26872==    by 0x4E49EC4: pthread_create@@GLIBC_2.2.5 (pthread_create.c:797)
==26872==    by 0x4C36A27: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108C54: Pthread_create (mythreads.h:51)
==26872==    by 0x108DA1: main (main-deadlock-global.c:27)
==26872== 
==26872== ----------------------------------------------------------------
==26872== 
==26872== Thread #3: lock order "0x30A080 before 0x30A0C0" violated
==26872== 
==26872== Observed (incorrect) order is: acquisition of lock at 0x30A0C0
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108D12: worker (main-deadlock-global.c:15)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872== 
==26872==  followed by a later acquisition of lock at 0x30A080
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108D1E: worker (main-deadlock-global.c:16)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872== 
==26872== Required order was established by acquisition of lock at 0x30A080
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108CF8: worker (main-deadlock-global.c:12)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872== 
==26872==  followed by a later acquisition of lock at 0x30A0C0
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108D04: worker (main-deadlock-global.c:13)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872== 
==26872==  Lock at 0x30A080 was first observed
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108CF8: worker (main-deadlock-global.c:12)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872==  Address 0x30a080 is 0 bytes inside data symbol "m1"
==26872== 
==26872==  Lock at 0x30A0C0 was first observed
==26872==    at 0x4C3403C: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x108AD7: Pthread_mutex_lock (mythreads.h:23)
==26872==    by 0x108D04: worker (main-deadlock-global.c:13)
==26872==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==26872==    by 0x4E496DA: start_thread (pthread_create.c:463)
==26872==    by 0x518288E: clone (clone.S:95)
==26872==  Address 0x30a0c0 is 0 bytes inside data symbol "m2"
==26872== 
==26872== 
==26872== 
==26872== For counts of detected and suppressed errors, rerun with: -v
==26872== Use --history-level=approx or =none to gain increased speed, at
==26872== the cost of reduced accuracy of conflicting-access information
==26872== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 7 from 7)

It still picks up the deadlock, even though it shouldn't happen through the 
global lock. It tells me helgrind can tell if a deadlock might happen.

6.

A lot of CPU cycles are spent spinning the CPU in that empty while loop.

7.

==27344== Helgrind, a thread error detector
==27344== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==27344== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==27344== Command: ./main-signal
==27344== 
this should print first
==27344== ---Thread-Announcement------------------------------------------
==27344== 
==27344== Thread #1 is the program's root thread
==27344== 
==27344== ---Thread-Announcement------------------------------------------
==27344== 
==27344== Thread #2 was created
==27344==    at 0x518287E: clone (clone.S:71)
==27344==    by 0x4E49EC4: create_thread (createthread.c:100)
==27344==    by 0x4E49EC4: pthread_create@@GLIBC_2.2.5 (pthread_create.c:797)
==27344==    by 0x4C36A27: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==27344==    by 0x108CA4: Pthread_create (mythreads.h:51)
==27344==    by 0x108D81: main (main-signal.c:15)
==27344== 
==27344== ----------------------------------------------------------------
==27344== 
==27344== Possible data race during read of size 4 at 0x30A014 by thread #1
==27344== Locks held: none
==27344==    at 0x108D83: main (main-signal.c:16)
==27344== 
==27344== This conflicts with a previous write of size 4 by thread #2
==27344== Locks held: none
==27344==    at 0x108D36: worker (main-signal.c:9)
==27344==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==27344==    by 0x4E496DA: start_thread (pthread_create.c:463)
==27344==    by 0x518288E: clone (clone.S:95)
==27344==  Address 0x30a014 is 0 bytes inside data symbol "done"
==27344== 
==27344== ----------------------------------------------------------------
==27344== 
==27344== Possible data race during write of size 1 at 0x5C531A5 by thread #1
==27344== Locks held: none
==27344==    at 0x4C3C546: mempcpy (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==27344==    by 0x50EC993: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1258)
==27344==    by 0x50E1A8E: puts (ioputs.c:40)
==27344==    by 0x108D98: main (main-signal.c:18)
==27344==  Address 0x5c531a5 is 21 bytes inside a block of size 1,024 alloc'd
==27344==    at 0x4C30F2F: malloc (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==27344==    by 0x50DF18B: _IO_file_doallocate (filedoalloc.c:101)
==27344==    by 0x50EF378: _IO_doallocbuf (genops.c:365)
==27344==    by 0x50EE497: _IO_file_overflow@@GLIBC_2.2.5 (fileops.c:759)
==27344==    by 0x50EC9EC: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1266)
==27344==    by 0x50E1A8E: puts (ioputs.c:40)
==27344==    by 0x108D35: worker (main-signal.c:8)
==27344==    by 0x4C36C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so)
==27344==    by 0x4E496DA: start_thread (pthread_create.c:463)
==27344==    by 0x518288E: clone (clone.S:95)
==27344==  Block was alloc'd by thread #2
==27344== 
this should print last
==27344== 
==27344== For counts of detected and suppressed errors, rerun with: -v
==27344== Use --history-level=approx or =none to gain increased speed, at
==27344== the cost of reduced accuracy of conflicting-access information
==27344== ERROR SUMMARY: 23 errors from 2 contexts (suppressed: 40 from 40)

The code does execute correctly, but there IS a data race when writing to "done"

8.

This is preferred for both correctness AND performance. Using flag variables and 
spinning is not necessarily correct and can cause bugs. Using condition 
variables over flag variables and spinning is also more performant.

9.

It didn't report any errors.